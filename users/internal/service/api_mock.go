// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/api.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/api.go -package=service -destination=internal/services/api_mock.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	repository "github.com/BorisRostovskiy/company.info/users/internal/repository"
	jwt "github.com/golang-jwt/jwt/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddKey mocks base method.
func (m *MockRepository) AddKey(ctx context.Context, key repository.Key, Secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKey", ctx, key, Secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddKey indicates an expected call of AddKey.
func (mr *MockRepositoryMockRecorder) AddKey(ctx, key, Secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockRepository)(nil).AddKey), ctx, key, Secret)
}

// GetKeyByID mocks base method.
func (m *MockRepository) GetKeyByID(ctx context.Context, ID, Secret string) (*repository.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByID", ctx, ID, Secret)
	ret0, _ := ret[0].(*repository.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByID indicates an expected call of GetKeyByID.
func (mr *MockRepositoryMockRecorder) GetKeyByID(ctx, ID, Secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByID", reflect.TypeOf((*MockRepository)(nil).GetKeyByID), ctx, ID, Secret)
}

// MockKeycloakCaller is a mock of KeycloakCaller interface.
type MockKeycloakCaller struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakCallerMockRecorder
	isgomock struct{}
}

// MockKeycloakCallerMockRecorder is the mock recorder for MockKeycloakCaller.
type MockKeycloakCallerMockRecorder struct {
	mock *MockKeycloakCaller
}

// NewMockKeycloakCaller creates a new mock instance.
func NewMockKeycloakCaller(ctrl *gomock.Controller) *MockKeycloakCaller {
	mock := &MockKeycloakCaller{ctrl: ctrl}
	mock.recorder = &MockKeycloakCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakCaller) EXPECT() *MockKeycloakCallerMockRecorder {
	return m.recorder
}

// CreateKCUser mocks base method.
func (m *MockKeycloakCaller) CreateKCUser(ctx context.Context, userName, email, firstName, lastName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKCUser", ctx, userName, email, firstName, lastName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKCUser indicates an expected call of CreateKCUser.
func (mr *MockKeycloakCallerMockRecorder) CreateKCUser(ctx, userName, email, firstName, lastName, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKCUser", reflect.TypeOf((*MockKeycloakCaller)(nil).CreateKCUser), ctx, userName, email, firstName, lastName, password)
}

// GetKCUserByEmail mocks base method.
func (m *MockKeycloakCaller) GetKCUserByEmail(ctx context.Context, email string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKCUserByEmail", ctx, email)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKCUserByEmail indicates an expected call of GetKCUserByEmail.
func (mr *MockKeycloakCallerMockRecorder) GetKCUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKCUserByEmail", reflect.TypeOf((*MockKeycloakCaller)(nil).GetKCUserByEmail), ctx, email)
}

// LoginToKC mocks base method.
func (m *MockKeycloakCaller) LoginToKC(ctx context.Context, userName, userPWD string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginToKC", ctx, userName, userPWD)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginToKC indicates an expected call of LoginToKC.
func (mr *MockKeycloakCallerMockRecorder) LoginToKC(ctx, userName, userPWD any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginToKC", reflect.TypeOf((*MockKeycloakCaller)(nil).LoginToKC), ctx, userName, userPWD)
}

// LogoutFromKC mocks base method.
func (m *MockKeycloakCaller) LogoutFromKC(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutFromKC", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutFromKC indicates an expected call of LogoutFromKC.
func (mr *MockKeycloakCallerMockRecorder) LogoutFromKC(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutFromKC", reflect.TypeOf((*MockKeycloakCaller)(nil).LogoutFromKC), ctx, refreshToken)
}

// VerifyKCToken mocks base method.
func (m *MockKeycloakCaller) VerifyKCToken(token string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyKCToken", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyKCToken indicates an expected call of VerifyKCToken.
func (mr *MockKeycloakCallerMockRecorder) VerifyKCToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyKCToken", reflect.TypeOf((*MockKeycloakCaller)(nil).VerifyKCToken), token)
}
