// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/http/router.go
//
// Generated by this command:
//
//	mockgen -source=internal/handlers/http/router.go -package=http -destination=internal/handlers/http/api_caller_mock.go
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	http "net/http"
	reflect "reflect"

	service "github.com/BorisRostovskiy/company.info/users/internal/service"
	v4 "github.com/golang-jwt/jwt/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockAPICallerService is a mock of APICallerService interface.
type MockAPICallerService struct {
	ctrl     *gomock.Controller
	recorder *MockAPICallerServiceMockRecorder
	isgomock struct{}
}

// MockAPICallerServiceMockRecorder is the mock recorder for MockAPICallerService.
type MockAPICallerServiceMockRecorder struct {
	mock *MockAPICallerService
}

// NewMockAPICallerService creates a new mock instance.
func NewMockAPICallerService(ctrl *gomock.Controller) *MockAPICallerService {
	mock := &MockAPICallerService{ctrl: ctrl}
	mock.recorder = &MockAPICallerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPICallerService) EXPECT() *MockAPICallerServiceMockRecorder {
	return m.recorder
}

// AddKey mocks base method.
func (m *MockAPICallerService) AddKey(ctx context.Context, acc, pubKey, privateKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKey", ctx, acc, pubKey, privateKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddKey indicates an expected call of AddKey.
func (mr *MockAPICallerServiceMockRecorder) AddKey(ctx, acc, pubKey, privateKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockAPICallerService)(nil).AddKey), ctx, acc, pubKey, privateKey)
}

// CreateKCUser mocks base method.
func (m *MockAPICallerService) CreateKCUser(ctx context.Context, userName, email, firstName, lastName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKCUser", ctx, userName, email, firstName, lastName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKCUser indicates an expected call of CreateKCUser.
func (mr *MockAPICallerServiceMockRecorder) CreateKCUser(ctx, userName, email, firstName, lastName, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKCUser", reflect.TypeOf((*MockAPICallerService)(nil).CreateKCUser), ctx, userName, email, firstName, lastName, password)
}

// GetKCUserByEmail mocks base method.
func (m *MockAPICallerService) GetKCUserByEmail(ctx context.Context, email string) (*service.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKCUserByEmail", ctx, email)
	ret0, _ := ret[0].(*service.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKCUserByEmail indicates an expected call of GetKCUserByEmail.
func (mr *MockAPICallerServiceMockRecorder) GetKCUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKCUserByEmail", reflect.TypeOf((*MockAPICallerService)(nil).GetKCUserByEmail), ctx, email)
}

// GetKeyByID mocks base method.
func (m *MockAPICallerService) GetKeyByID(ctx context.Context, ID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByID", ctx, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyByID indicates an expected call of GetKeyByID.
func (mr *MockAPICallerServiceMockRecorder) GetKeyByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByID", reflect.TypeOf((*MockAPICallerService)(nil).GetKeyByID), ctx, ID)
}

// LoginToKC mocks base method.
func (m *MockAPICallerService) LoginToKC(ctx context.Context, userName, userPWD string) (*service.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginToKC", ctx, userName, userPWD)
	ret0, _ := ret[0].(*service.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginToKC indicates an expected call of LoginToKC.
func (mr *MockAPICallerServiceMockRecorder) LoginToKC(ctx, userName, userPWD any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginToKC", reflect.TypeOf((*MockAPICallerService)(nil).LoginToKC), ctx, userName, userPWD)
}

// LogoutFromKC mocks base method.
func (m *MockAPICallerService) LogoutFromKC(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutFromKC", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutFromKC indicates an expected call of LogoutFromKC.
func (mr *MockAPICallerServiceMockRecorder) LogoutFromKC(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutFromKC", reflect.TypeOf((*MockAPICallerService)(nil).LogoutFromKC), ctx, token)
}

// VerifyKCToken mocks base method.
func (m *MockAPICallerService) VerifyKCToken(token string) (v4.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyKCToken", token)
	ret0, _ := ret[0].(v4.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyKCToken indicates an expected call of VerifyKCToken.
func (mr *MockAPICallerServiceMockRecorder) VerifyKCToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyKCToken", reflect.TypeOf((*MockAPICallerService)(nil).VerifyKCToken), token)
}

// Mockresponse is a mock of response interface.
type Mockresponse struct {
	ctrl     *gomock.Controller
	recorder *MockresponseMockRecorder
	isgomock struct{}
}

// MockresponseMockRecorder is the mock recorder for Mockresponse.
type MockresponseMockRecorder struct {
	mock *Mockresponse
}

// NewMockresponse creates a new mock instance.
func NewMockresponse(ctrl *gomock.Controller) *Mockresponse {
	mock := &Mockresponse{ctrl: ctrl}
	mock.recorder = &MockresponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockresponse) EXPECT() *MockresponseMockRecorder {
	return m.recorder
}

// WriteTo mocks base method.
func (m *Mockresponse) WriteTo(w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockresponseMockRecorder) WriteTo(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*Mockresponse)(nil).WriteTo), w)
}
